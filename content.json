{"meta":{"title":"文心雕龙","subtitle":"","description":"","author":"明 尘","url":"http://example.com","root":"/"},"pages":[{"title":"404","date":"2023-12-07T13:46:17.000Z","updated":"2023-12-07T13:46:17.270Z","comments":true,"path":"404/index.html","permalink":"http://example.com/404/index.html","excerpt":"","text":""},{"title":"search","date":"2023-12-07T13:45:55.000Z","updated":"2023-12-07T13:45:55.740Z","comments":true,"path":"search/index.html","permalink":"http://example.com/search/index.html","excerpt":"","text":""},{"title":"侠客行","date":"2023-12-09T11:59:33.000Z","updated":"2023-12-09T12:41:17.431Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"赵客缦胡缨，吴钩霜雪明。银鞍照白马，飒沓如流星。十步杀一人，千里不留行。事了拂衣去，深藏身与名。闲过信陵饮，脱剑膝前横。将炙啖朱亥，持觞劝侯嬴。三杯吐然诺，五岳倒为轻。眼花耳热后，意气素霓生。救赵挥金槌，邯郸先震惊。千秋二壮士，烜赫大梁城。纵死侠骨香，不惭世上英。谁能书阁下，白首太玄经。"},{"title":"categories","date":"2023-12-09T12:33:40.000Z","updated":"2023-12-09T12:35:31.226Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-12-09T12:34:05.000Z","updated":"2023-12-09T12:36:17.609Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"安卓病毒监听","slug":"安卓病毒监听","date":"2023-12-10T03:28:32.000Z","updated":"2023-12-10T06:28:10.459Z","comments":true,"path":"2023/12/10/安卓病毒监听/","permalink":"http://example.com/2023/12/10/%E5%AE%89%E5%8D%93%E7%97%85%E6%AF%92%E7%9B%91%E5%90%AC/","excerpt":"","text":"一、反弹shell和正向shell反弹SHELL ​ 控制端监听在某TCP&#x2F;UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。 正向shell可能会出现bug，会有window或者Linux的防火墙抵御来自sever的监听。 但是反向shell不会，因为反向shell是客户机c出栈，正向shell是入栈。 解决防火墙抵御bug的解决方法 直接关闭防火墙或者在防火墙高级设置中允许连接 二、使用mumu进行病毒监听1.在官网上下载mumu模拟器版本，下载mumu6 https://mumu.163.com/index.html 2.安装好AhMyth程序 AHMYTH TASORT EDGE 3.win+r,输入cmd，输入ipconfig查找自己的ip 4.打开AhMyth，在Source IP中输入刚刚获取到的ip，端口号默认即可，然后点击Build 5.找到生成的apk文件 6.打开mumu模拟器，点击安装，选择刚刚生成的apk文件 7.可以看到桌面上多了一个安卓图标 8.切换到AhMyth，点击Listen,然后回到mumu双击安卓图标 9.点击Open The Lab，然后可以发现打开了一个新窗口。利用这个窗口可以实现对mumu模拟器的监听。 三、java的安装和环境配置1.下载Java安装包2.新建两个文件夹，分别命名为java8和java_jre 3.点击安装，将目录更换到java8文件夹下，然后点击下一步 安装 4.将目标文件夹的路径更换到java_jre文件夹中，然后下一步 5.右击此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量， 6.找到系统变量的Path变量，双击打开 7.将新建的两个文件夹的路径加进去，然后确定，这样java环境就配置好了 编辑环境变量","categories":[],"tags":[]},{"title":"python列表元组","slug":"python学习1","date":"2023-12-09T07:06:38.000Z","updated":"2023-12-09T13:48:04.920Z","comments":true,"path":"2023/12/09/python学习1/","permalink":"http://example.com/2023/12/09/python%E5%AD%A6%E4%B9%A01/","excerpt":"","text":"列表和元组​ 数据结构是以某种方式（如通过编号）组合起来的数据元素（如数、字符乃至其他数据结构）集合。Python中最基本的数据结构是 序列（sequence）。 ​ 序列中的每个元素都有编号，即其位置或索引，其中第一个元素的索引位0，第二个元素的索引位1，依次类推。 ​ 列表和元组的主要不同在于，列表是可以修改的，而元组不可以。列表适用于需要中途添加元素的情形，而元组适用于处于某种考虑需要禁止修改序列的情形。几乎所有情况下都可使用列表来代替元组，一种情况例外：将元组用作字典键。在需要处理一系列值时，序列很有用。 ​ 适用于所有序列的操作： 索引、切片、相加、相乘 和 成员资格检查。还有一个重要的操作：迭代（iteration）。 索引序列中的所有元素都有编号——从0开始递增。 可使用 切片（slicing）来访问特定范围内的元素。 序列相加可使用加法运算符来拼接序列。 乘法将序列与数 x 相乘时，将重复这个序列 x 次来创建一个新序列。 ​ 要检查特定的值是否包含在序列中，可使用运算符 in。它检查是否满足指定的条件，并返回相应的值：满足时返回True，不满足时返回False。这样的运算符称为布尔运算符，而前述真值称为布尔值。 列表函数 list使用字符串创建列表，可使用函数 list。 12&gt;&gt;&gt; list(&#x27;world&#x27;) [&#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;] 注意，可将任何序列（而不仅仅是字符串）作为list的参数。 修改列表：给元素赋值使用索引表示法给特定位置的元素赋值，如 x[1] &#x3D; 2。 1234&gt;&gt;&gt; x=[1,1,1] &gt;&gt;&gt; x[1]=2 &gt;&gt;&gt; x [1, 2, 1] 注意：不能给不存在的元素赋值。 删除元素使用 del 语句，从列表中删除元素： 12345&gt;&gt;&gt; names = [&#x27;abandon&#x27;,&#x27;loss&#x27;,&#x27;good&#x27;,&#x27;email&#x27;,&#x27;error&#x27;] &gt;&gt;&gt;&gt;&gt;&gt; del names[2] &gt;&gt;&gt; names [&#x27;abandon&#x27;, &#x27;loss&#x27;, &#x27;email&#x27;, &#x27;error&#x27;] 给切片赋值切片是一项极其强大的功能，而能够给切片赋值让这项功能显得更加强大。 123456&gt;&gt;&gt; name = list(&#x27;Perl&#x27;) &gt;&gt;&gt; name &gt;&gt;&gt; [&#x27;P&#x27;, &#x27;e&#x27;, &#x27;r&#x27;, &#x27;l&#x27;]&gt;&gt;&gt; name[2:] = list(&#x27;ar&#x27;) &gt;&gt;&gt; name [&#x27;P&#x27;, &#x27;e&#x27;, &#x27;a&#x27;, &#x27;r&#x27;] 可同时给多个元素赋值。通过使用切片赋值，可将切片替换为长度与其不同的序列。 列表方法方法是与对象（列表、数、字符串等）联系紧密的函数。通常，如下方法调用： object.method(arguments) 列表包含多个用来查看和修改其内容的方法： append方法 ,append 用于将一个对象附加到列表末尾。 clear方法, clear 就地清空列表的内容。 copy方法, copy 复制列表。常规复制只是将另一个名称关系到列表。 count方法, count 计算指定的元素在列表中出现了多少次. extend方法, extend 能够同时将多个值附加到列表末尾，为此可将这些值组成的序列作为参数提供个方法extend。换言之，可使用一个列表来扩展另一个列表。 index方法 ,index 在列表中查找指定值第一次出现的索引。 insert方法, insert 用于将一个对象插入列表。 pop方法, pop 从列表中删除一个元素（末尾为最后一个元素），并返回这一元素。 remove方法, remove 用于删除第一个为指定值的元素。 reverse方法 ,reverse 按相反的顺序排序列列表中的元素。 sort方法, sort 用于对列表就地排序。意味着对原来的列表进行修改，使其元素按顺序排列，而不是返回排序后的列表的副本。 高级排序方法 ,sort 接受两个可选参数：key 和 reverse。这两个参数通常是按名称指定的，称为关键字参数。参数key类似于参数 cmp：将其设置为一个用于排序的函数。根据长度对元素进行排序，可将参数key设置为函数len。 元组：不可修改的序列​ 与列表一样，元组也是序列，唯一的差别在于元组是不能修改的。​ 元组的语法很简单，只要将一些值用逗号分隔，就能自动创建一个元组。 ​ 元组还可用圆括号括起来。 ​ 空元组用两个不包含任何内容的圆括号表示。 ​ 只包含一个值的元组，也必须在它后面加上逗号。 ​ 函数tuple的工作原理与 list很像：它将一个序列作为参数，并将其转换为元组。如果参数已经是元组，就原封不动地返回它。 ​ 元组的创建及其元素的访问方式与其他序列相同。 ​ 元组的切片也是元组，就像列表的切片也是列表一样。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 元组的不可变性tup = (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)tup[1] = &#x27;改变&#x27;print(tup)---------------------------------------------------------------------------TypeError Traceback (most recent call last)&lt;ipython-input-56-493da6be5b3d&gt; in &lt;module&gt;() 1 # 元组的不可变性 2 tup = (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)----&gt; 3 tup[1] = &#x27;改变&#x27; 4 print(tup)TypeError: &#x27;tuple&#x27; object does not support item assignment # 创建空元组a = ()print(type(a))# 当元组只有一个元素时需要在末尾加一个逗号，# 否则会解析为括号的运算方法a = (3)print(type(a))a = (3,)print(type(a))&lt;class &#x27;int&#x27;&gt;&lt;class &#x27;tuple&#x27;&gt;# 多个元素的元组创建# 可以不用加括号a = 1,2print(type(a))b = (1,2)print(type(b))# 多种类型元素的元组a = (&#x27;a&#x27;,1.2,None,True,[1,2])print(type(a)) 列表转元组方法123456789101112lst = [&#x27;a&#x27;,&#x27;s&#x27;,True]a = tuple(lst)print(a,type(a))(&#x27;a&#x27;, &#x27;s&#x27;, True) &lt;class &#x27;tuple&#x27;&gt;a = (&#x27;a&#x27;, &#x27;s&#x27;, True)当然元组也可以转为列表b = list(a)print(b,type(b))[&#x27;a&#x27;, &#x27;s&#x27;, True] &lt;class &#x27;list&#x27;&gt; 元组的连接与复制元组的连接，与列表类似，通过+连接 123456789101112131415a = (1,2)b = (3,4)a+b123(1, 2, 3, 4)1元组的复制，与列表类似，通过* 复制a = (&#x27;a&#x27;,)a * 412(&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;) 索引与切片，与列表的操作类似 元组的常用操作12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758查询元组的长度tup = (1,2,&#x27;a&#x27;,True,None,[1,2,3])len(tup)6获取纯数值元组的最大值、最小值和总和a = tuple(range(1,11))print(&#x27;最大值为：&#x27;,max(a))print(&#x27;最小值为：&#x27;,min(a))print(&#x27;总 和为：&#x27;,sum(a))最大值为： 10最小值为： 1总 和为： 55查询索引值tup.index(&#x27;a&#x27;)2统计元组的元素出现的次数tup.count(1)2删除元组(只能删除整个元组，不能删除具体的元素)del tuptup---------------------------------------------------------------------------NameError Traceback (most recent call last)&lt;ipython-input-72-cbde4a271b58&gt; in &lt;module&gt;() 1 del tup----&gt; 2 tupNameError: name &#x27;tup&#x27; is not defined for遍历元组tup = (1,2,&#x27;a&#x27;,True,None,[1,2,3])for i in tup: print(i) 12aTrueNone[1, 2, 3]判断某个元素是否在元组中tup = (1,2,&#x27;a&#x27;,True,None,[1,2,3])None in tupTrue","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"http://example.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"vue学习","slug":"vue学习","date":"2023-12-08T11:47:16.000Z","updated":"2023-12-09T13:47:46.201Z","comments":true,"path":"2023/12/08/vue学习/","permalink":"http://example.com/2023/12/08/vue%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"学vue之前还有一点DNS的知识，各种协议端口号一般是可以一图概括 DNS可以说就是域名解析服务 pc访问百度会发送请求，优先度从上到下，会先请求本地，本地若没有则依次往下。 vue学习Vue概述 Vue 是一套用于构建用户界面的渐进式框架，发布于2014年2月。 与其它大型框架不同的是，Vue被设计为可以自底向上逐层应用。 Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库(如: vue-router: 跳转，vue-resource: 通信，vuex:管理)或既有项目整合。 官网：https://cn.vuejs.org/ 三要素 HTML (结构) :超文本标记语言(Hyper Text Markup Language) ，决定网页的结构和内容。 CSS (表现) :层叠样式表(Cascading Style sheets) ，设定网页的表现样式。 JavaScript (行为) :是一种弱类型脚本语言，其源代码不需经过编译，而是由浏览器解释运行,用于控制网页的行为。 vue下载安装 1npm config set refistry https://registry.npm.taobao.org npm install -g @vue/cli到项目目录 12vue create xxxxnpm run serve vue3引入element-plus 123npm create vue@latestnpm install element-plus --savenpm install -D unplugin-vue-components unplugin-auto-import 这时候vue已经安装好了，可以在vscode中打开。 点开vue.app文件就会出现如图 但这是初始设置，最好改一下配置文件 12345678main.jsimport &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import ElementPlus from &#x27;element-plus&#x27;;import &#x27;element-plus/dist/index.css&#x27;createApp(App).mount(&#x27;#app&#x27;) Vue基础语法Vue.config.productionTip &#x3D; false &#x2F;&#x2F;阻止vue在启动时生成提示Vue实例和容器是一一对应的 src&#x2F;App.vue是入口文件 。 //导包 。 &#x2F;&#x2F;html部分 //css部分 vite.config.js配置文件 1234567891011121314151617181920212223242526import &#123; fileURLToPath, URL &#125; from &#x27;node:url&#x27;import &#123; defineConfig &#125; from &#x27;vite&#x27;import vue from &#x27;@vitejs/plugin-vue&#x27;import AutoImport from &#x27;unplugin-auto-import/vite&#x27;import Components from &#x27;unplugin-vue-components/vite&#x27;import &#123; ElementPlusResolver &#125; from &#x27;unplugin-vue-components/resolvers&#x27;// https://vitejs.dev/config/export default defineConfig(&#123; plugins: [ vue(), // ... AutoImport(&#123; resolvers: [ElementPlusResolver()], &#125;), Components(&#123; resolvers: [ElementPlusResolver()], &#125;), ], resolve: &#123; alias: &#123; &#x27;@&#x27;: fileURLToPath(new URL(&#x27;./src&#x27;, import.meta.url)) &#125; &#125;&#125;) 学习vue可以去Element,上面很多组件都可以直接用，内容齐全https://element-plus.org/ 案例下面可以直接查看源代码。 将代码复制到vue.app中可以直接运行 这是运行效果。vue有js和ts,编写时有部分不同。","categories":[{"name":"web前端","slug":"web前端","permalink":"http://example.com/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"},{"name":"安装","slug":"安装","permalink":"http://example.com/tags/%E5%AE%89%E8%A3%85/"}]},{"title":"linux命令补充","slug":"linux命令补充","date":"2023-12-06T13:48:26.000Z","updated":"2023-12-09T13:42:57.687Z","comments":true,"path":"2023/12/06/linux命令补充/","permalink":"http://example.com/2023/12/06/linux%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%85/","excerpt":"","text":"今天补充之前学的Linux命令 Linux 查询命令man命令linux中使用man命令来查询命令的帮助文件,命令格式如下: 1man [章节] command 常用命令如下： 1d, Ctrl+D: 向文件尾部翻半屏；u, Ctrl+U: 向文件首部翻半屏； q: 退出； #：跳转至第#行； home: 回到文件首部； end：翻至文件尾部。 命令的帮助文件通常存放在/usr/share/man目录下。 man包含9个章节，章节用数字表示，分别是： 1用户命令 系统调用 C库调用设备文件及特殊文件 配置文件格式 游戏杂项 管理类的命令Linux 内核API 使用man搜索命令 以KEYWORD指定的字符串为关键字，从当前位置向文件首部搜索，不区分字符大小写； 1n: 下一个 N：上一个 Linux info命令linux中使用info命令来查询命令的帮助文件。info页面比man page编写得要更好、更容易理解，也更友好，但man page使用起来确实要更容易得多。一个man page只有一页，而info页面几乎总是将它们的内容组织成多个区段（称为节点），每个区段也可能包含子区段（称为子节点）。 命令格式如下： 1info [命令参数] command 常用命令参数选项： 1-d：添加包含info格式帮助文档的目录；-f：指定要读取的info格式的帮助文档；-n：指定首先访问的info帮助文件的节点；-o：输出被选择的节点内容到指定文件。 常见命令如下： 1?键：它就会显示info的常用快捷键；N键：显示（相对于本节点的）下一节点的文档内容；P键：显示（相对于本节点的）前一节点的文档内容；U键：进入当前命令所在的主题；M键：敲M键后输入命令的名称就可以查看该命令的帮助文档了；G键：敲G键后输入主题名称，进入该主题；L键：回到上一个访问的页面；SPACE键：向前滚动一页；BACKUP或DEL键：向后滚动一页；Q：退出info。 Linux文件&#x2F;目录管理chattr​ chattr的作用是修改文件&#x2F;目录的特殊属性。 具体命令如下： 1chattr [+|-|=] 属性标示符 命令参数 文件/目录 常用命令参数如下： 12-R：递归处理，将指令目录下的所有文件及子目录一并处理；-V：显示指令执行过程；+&lt;属性标示符&gt;：开启文件或目录的该项属性；-&lt;属性标示符&gt;：关闭文件或目录的该项属性；=&lt;属性标示符&gt;：指定文件或目录的该项属性。 常用属性标示符： 1a：让文件或目录仅供附加用途；A：不更新文件或目录的最后存取时间；c：将文件或目录压缩后存放；d：将文件或目录排除在倾倒操作之外；i：不得任意更动文件或目录；s：保密性删除文件或目录；S：即时更新文件或目录；u：预防意外删除。 lsattrlsattr的作用查看文件&#x2F;目录的特殊属性设置情况。 具体命令如下： 1lsattr 命令参数 文件/目录 常用参数如下： 1-R：递归的操作方式；-V：显示指令的版本信息；-a：列出目录中的所有文件，包括隐藏文件。 查看目录testDir下所有内容的特殊属性，具体使用如下命令： 1lsattr -Ra testFile Linux硬链接ln 源文件 目标文件 为当前目录下的文件testFile创建一个硬链接testFileLink，可以使用如下命令： 1ln testFile testFileLink Linux软链接ln -s 源文件 目标文件 为当前目录下的文件testFile创建一个软链接myLink，可以使用如下命令： 1ln -s testFile myLink 设置文件&#x2F;目录的特殊权限setuid和setgid。 setuid的八进制表示为4000 setgid的八进制表示为2000 setuid的作用是让执行该命令的用户以该命令拥有者的权限去执行。 数字设置命令：chmod 4xxx 文件/目录 助记语法设置命令：chmod u [+|-] s 文件/目录 创建一个新文件testFile，使用数字设置方法为文件testFile添加setuid权限，具体使用如下命令： 1touch testFilels -l testFilesudo chmod 4764 testFilels -l testFile setgid 数字设置命令：chmod 2xxx 文件/目录 助记语法设置命令：chmod g [+|-] s 文件/目录 创建一个新文件testFile，使用数字设置方法为文件testFile添加setgid权限，具体使用如下命令： 1touch testFilels -l testFilesudo chmod 2674 testFilels -l testFile Linux压缩和归档文件tar命令打包tar命令可以将多个文件&#x2F;目录进行打包，将多个文件生成一个文件，生成的文件后缀为.tar。 具体打包命令如下： 1tar -cvf 生成的tar包名 要打包的文件/目录列表 常用命令参数如下： 1-c 建立新的归档文件；-v 处理过程中输出相关信息；-f 对普通文件操作； 压缩采用bzip2方式执行tar命令进行压缩的具体命令如下： 1tar -jcvf 指定生成的压缩文件名 要被压缩的文件/目录列表 常用命令参数如下： 1-c 建立新的归档文件；-v 处理过程中输出相关信息；-f 对普通文件操作；-j 以bzip2对文件/目录进行压缩； 采用gzip进行压缩的具体命令如下： 1tar -zcvf 指定生成的压缩文件名 要被压缩的文件/目录列表 常用命令参数如下： 1-c 建立新的归档文件；-v 处理过程中输出相关信息；-f 对普通文件操作；-z 以gzip对文件/目录进行压缩； 解压1tar -jxvf 指定要解压的文件 常用命令参数如下： 1-x 或--ext\\fract或--get：从备份文件中还原文件；-v 处理过程中输出相关信息；-f 对普通文件操作；-j 以bunzip2进行解压缩； 采用gzip进行压缩的具体命令如下： 1tar -zxvf 指定要解压的文件 常用命令参数如下： 1-x 或--ext\\fract或--get：从备份文件中还原文件；-v 处理过程中输出相关信息；-f 对普通文件操作；-z 以gunzip进行解压缩； 1bunzip2 命令参数 指定要解压的文件 常用命令参数如下： 1-f或--force：解压缩时，若输出的文件与现有文件同名时，预设不会覆盖现有的文件；-k或——keep：在解压缩后，预设会删除原来的压缩文件。若要保留压缩文件，请使用此参数；-v或——verbose：解压缩文件时，显示详细的信息； 1gunzip 命令参数 指定要解压的文件 常用命令参数如下： 1-f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接；-l或-list：列出压缩文件的相关信息；-q或-quiet：不显示警告信息；-r或-recursive：递归处理，将指定目录下的所有文件及子目录一并处理；-v或-verbose：显示指令执行过程； 1unzip 命令参数 指定要解压的文件 常用命令参数如下： 1-q：执行时不显示任何信息；-n：解压缩时不要覆盖原有的文件；-d&lt;目录&gt;：指定文件解压缩后所要存储的目录； Linux文件定位命令查询命令-locateocate具体命令如下：1locate 命令参数 文件/目录 常用命令参数如下： 12345-c, --count 只输出找到的数量；-d, --database DBPATH 使用DBPATH指定的数据库，而不是默认数据库/var/lib/mlocate/mlocate.db；-i, --ignore-case 忽略大小写；-q, --quiet 安静模式，不会显示任何错误讯息；-e, --existing 只显示当前存在的文件条目； 查询命令-which&#x2F;whereis使用which命令定位passwd命令的位置，具体使用如下命令： 1which passwd whereis具体命令如下： 1whereis 命令参数 文件名 常用命令参数如下： 123456-b：只查找二进制文件；-B&lt;目录&gt;：只在设置的目录下查找二进制文件；-m：只查找说明文件；-M&lt;目录&gt;：只在设置的目录下查找说明文件；-s：只查找原始代码文件；-S&lt;目录&gt;只在设置的目录下查找原始代码文件； find1find 查找目录 查找参数 查找内容 常用查找参数如下： 123456789101112131415161718192021-amin&lt;+|-分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；-atime&lt;+|-24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；-cmin&lt;+|-分钟&gt;：查找在指定时间之时被更改过的文件或目录；-ctime&lt;+|-24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；-mmin&lt;+|-分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；-mtime&lt;+|-24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；-depth：从指定目录下最深层的子目录开始查找；-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；-follow：排除符号连接；-gid&lt;群组识别码&gt;：查找符合指定群组识别码的文件或目录；-group&lt;群组名称&gt;：查找符合指定群组名称的文件或目录；-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；-size&lt;+|-|=文件大小&gt;：查找符合指定的文件大小的文件；-type&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；-a：是前后条件都要满足；-o ：是满足一个条件就好； +：表示大于设置值的文件； - ：表示小于设置值的文件； = ：表示等于设置值的文件； 常见文件类型： 1234567f：普通文件l：符号链接d：目录c：字符设备b：块设备s：套接字p：Fifo 常见文件大小单位： b —— 块（512字节） c —— 字节 w —— 字（2字节） k —— 千字节 M —— 兆字节 G —— 吉字节 Linux 远程联机服务Telnet远程登录服务器telnet 命令格式： 1telnet 选项 参数 常见选项： 12345-a：尝试自动登入远端系统；-b&lt;主机别名&gt;：使用别名指定远端主机名称；-K：不自动登入远端主机；-l&lt;用户名称&gt;：指定要登入远端主机的用户名称；-e&lt;脱离字符&gt;：设置脱离字符； 参数： 12远程主机：指定要登录进行管理的远程主机；端口：指定TELNET协议使用的端口号； telnet常见命令当我们执行输入telnet后回车，我们就进行了telnet的命令模式，telnet常见的命令： logout：强制退出远程登录用户并关闭连接； open：新打开一个连接； display：显示当前操作系统参数； quit：退出telnet； z：挂起telnet； rsh远程登录1rsh` 命令格式：`rsh 选项 参数 常见选项： 123-d：使用Socket层级的排错功能。-n：把输入的指令号向代号为/dev/null的特殊外围设备。-l&lt;用户名称&gt;：指定要登入远端主机的用户名称； 参数： 12远程主机：指定要登录进行管理的远程主机；命令：指定执行的命令；","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"基础知识","slug":"基础知识","permalink":"http://example.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"}]},{"title":"html和css学习","slug":"html和css学习","date":"2023-12-06T12:50:58.000Z","updated":"2023-12-09T13:44:29.866Z","comments":true,"path":"2023/12/06/html和css学习/","permalink":"http://example.com/2023/12/06/html%E5%92%8Ccss%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"今天归纳一下学习的HTML和css。 HTML​ HTML5是一种标记语言，用于构建和呈现互联网上的超文本内容。它是HTML的最新版本，增加了很多新的元素和API，使得创建更丰富、更交互的Web应用变得更加容易。 语义元素​ HTML5引入了许多新的语义元素，例如&lt;header&gt;, &lt;footer&gt;, &lt;article&gt;, &lt;section&gt;, &lt;nav&gt;和&lt;aside&gt;等，它们使得页面的结构更加清晰，也更有利于搜索引擎优化和辅助阅读技术的使用。 开始标签 元素内容 结束标签 This is a paragraph This is a link ​ HTML 元素以开始标签起始，以结束标签终止，元素的内容*是开始标签与结束标签之间的内容。 ​ HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。 ​ 属性总是以名称&#x2F;值对的形式出现，比如：*name&#x3D;”value”*。 ​ 属性总是在 HTML 元素的开始标签中规定。 ​ HTML 链接由 标签定义。链接的地址在 href 属性中指定： 1&lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;/a&gt; 定义标题的开始 1&lt;h1 align=&quot;center&quot;&gt; 拥有关于对齐方式的附加信息。 段落与文字标签 标签 语义 说明 ~ header 标题 paragraph 段落 break 换行 horizontal rule 水平线 division 分割（块元素） span 区域（行内元素） 超链接使用a标签，语法如下： 列表标签 标签 语义 说明 ol ordered list 有序列表 ul unordered list 无序列表 dl definition list 定义列表 图片标签 语法： 属性 说明 src 图像的文件地址 alt 图片显示不出来时的提示文字 title 鼠标移到图片上的提示文字 HTML3种列表 列表有3种：有序列表、无序列表和定义列表。,,。 表单控件​ 表单控件: HTML5为表单提供了新的输入类型（如email, date, time, url, search, range, color等），以及新的属性（如placeholder, required, autofocus等），使得表单的创建更加方便，用户的体验也更好。 &lt;form&gt; 元素HTML 表单用于收集用户输入。 &lt;/form&gt; 元素是最重要的表单元素。 元素有很多形态，根据不同的 type 属性。 类型 描述 text 定义常规文本输入。 radio 定义单选按钮输入（选择多个选择之一） submit 定义提交按钮（提交表单） 定义用于文本输入的单行输入字段： 定义用于向表单处理程序（form-handler）提交表单的按钮。 表单处理程序通常是包含用来处理输入数据的脚本的服务器页面。 元素（下拉列表）​ 元素定义下拉列表 元素定义待选择的选项。 列表通常会把首个选项显示为被选选项。 元素 元素定义多行输入字段（文本域） 元素 元素定义可点击的按钮 form表单有get和post传递参数。 ​ 两个简易的表单效果图 HTML页面框架布局​ HTML页面框架布局通常指的是页面的整体结构，包括页头（header）、页脚（footer）、导航栏（nav）、主要内容区（main）以及侧边栏（aside）等部分。 ​ 利用学的HTML制作的一个简易页面，每个图片都是一个div盒子 CSSCSS 选择器​ CSS 选择器用于“查找”（或选取）要设置样式的 HTML 元素。 我们可以将 CSS 选择器分为五类： 简单选择器（根据名称、id、类来选取元素） 组合器选择器（根据它们之间的特定关系来选取元素） 伪类选择器（根据特定状态选取元素） 伪元素选择器（选取元素的一部分并设置其样式） 属性选择器（根据属性或属性值来选取元素） ​ 元素选择器根据元素名称来选择 HTML 元素。id 名称不能以数字开头。 CSS 语法CSS 规则集（rule-set）由选择器和声明块组成： 选择器指向您需要设置样式的 HTML 元素。 声明块包含一条或多条用分号分隔的声明。 每条声明都包含一个 CSS 属性名称和一个值，以冒号分隔。 多条 CSS 声明用分号分隔，声明块用花括号括起来。 导航栏易用的导航对于任何网站都很重要。 通过使用 CSS，您可以将无聊的 HTML 菜单转换为美观的导航栏。 导航栏 &#x3D; 链接列表 导航栏需要标准 HTML 作为基础。 在我们的实例中，将用标准的 HTML 列表构建导航栏。 导航栏基本上就是链接列表，因此使用 和 元素会很有意义 CSS 边框样式border-style 属性指定要显示的边框类型。 允许以下值： dotted - 定义点线边框 dashed - 定义虚线边框 solid - 定义实线边框 double - 定义双边框 groove - 定义 3D 坡口边框。效果取决于 border-color 值 ridge - 定义 3D 脊线边框。效果取决于 border-color 值 inset - 定义 3D inset 边框。效果取决于 border-color 值 outset - 定义 3D outset 边框。效果取决于 border-color 值 none - 定义无边框 hidden - 定义隐藏边框 border-style 属性可以设置一到四个值（用于上边框、右边框、下边框和左边框）。 CSS 背景CSS background-colorbackground-color 属性指定元素的背景色。 页面的背景色设置如下： 123body &#123; background-color: lightblue;&#125; 有效的颜色名称 - 比如 “red” 十六进制值 - 比如 “#ff0000” RGB 值 - 比如 “rgb(255,0,0)” 不透明度 &#x2F; 透明度opacity 属性指定元素的不透明度&#x2F;透明度。取值范围为 0.0 - 1.0。值越低，越透明 设置链接样式链接可以使用任何 CSS 属性（例如 color、font-family、background 等）来设置样式。 a:link - 正常的，未访问的链接 a:visited - 用户访问过的链接 a:hover - 用户将鼠标悬停在链接上时 a:active - 链接被点击时 三种使用 CSS 的方法外部 CSS通过使用外部样式表，您只需修改一个文件即可改变整个网站的外观！ 每张 HTML 页面必须在 head 部分的 元素内包含对外部样式表文件的引用。 内部 CSS如果一张 HTML 页面拥有唯一的样式，那么可以使用内部样式表。 内部样式是在 head 部分的 元素中进行定义。 行内 CSS行内样式（也称内联样式）可用于为单个元素应用唯一的样式。 如需使用行内样式，请将 style 属性添加到相关元素。style 属性可包含任何 CSS 属性。 边距CSS 拥有用于为元素的每一侧指定外边距的属性： margin-top margin-right margin-bottom margin-left 所有外边距属性都可以设置以下值： auto - 浏览器来计算外边距 length - 以 px、pt、cm 等单位指定外边距 % - 指定以包含元素宽度的百分比计的外边距 inherit - 指定应从父元素继承外边距 CSS 拥有用于为元素的每一侧指定内边距的属性： padding-top padding-right padding-bottom padding-left 所有内边距属性都可以设置以下值： length - 以 px、pt、cm 等单位指定内边距 % - 指定以包含元素宽度的百分比计的内边距 inherit - 指定应从父元素继承内边距 提示：不允许负值。 利用学的知识就可以制作简单的网站页面了。 天街夜色凉如水，卧看牵牛织女星","categories":[{"name":"web前端","slug":"web前端","permalink":"http://example.com/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"http://example.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"HTML","slug":"HTML","permalink":"http://example.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"}]},{"title":"python学习","slug":"python学习","date":"2023-12-06T12:50:24.000Z","updated":"2023-12-09T13:46:44.434Z","comments":true,"path":"2023/12/06/python学习/","permalink":"http://example.com/2023/12/06/python%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"Python 特点完全面向对象的语言函数、模块、数字、字符串都是对象，Python 中一切皆对象完全支持继承、重载、多重继承支持重载运算符，也支持泛型设计 拥有一个强大的标准库Python 标准库提供了 系统管理、网络通信、文本处理、数据库接口、图形系统、XML 处理 等额外的功能 有大量的第三方模块使用方式与标准库类似。它们的功能覆盖 科学计算、人工智能、机器学习、Web 开发、数据库接口、图形系统 多个领域 面向对象的思维方式面向对象 是一种 思维方式，也是一门 程序设计技术要解决一个问题前，首先考虑 由谁 来做，怎么做事情是 谁 的职责，最后把事情做好就行！对象 就是 谁要解决复杂的问题，就可以找多个不同的对象，各司其职，共同实现，最终完成需求先找一个可以完成功能的对象，并且使用对象所提供的能力来解决问题 Python 的优缺点（1）优点简单、易学、免费、开源。面向对象，丰富的库，可扩展性如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用 C 或 C++ 编写，然后在 Python 程序中使用它们（2）缺点运行速度差一点，国内市场较小，中文资料匮乏。 执行 Python 程序的三种方式 解释器 —— python &#x2F; python3 交互式 —— ipython 集成开发环境 —— PyCharm 变量程序就是用来处理数据的，而变量就是用来存储数据的 数字型 整型 (int) 浮点型（float） 布尔型（bool） 真 True 非 0 数 —— 非零即真 假 False 0 复数型 (complex) 非数字型字符串、列表、元组、字典 如果变量是bool型，在计算时True对应的数字是1，False对应的数字是0 字符串变量之间使用 + 拼接字符串 input 函数实现键盘输入 格式化操作符% 被称为 格式化操作符，专门用于处理字符串中的格式包含 % 的字符串，被称为 格式化字符串% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符格式化字符 含义%s 字符串%d 有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全%f 浮点数，%.2f 表示小数点后只显示两位%% 输出 % 标识符和关键字标识符​ 标示符就是程序员定义的 变量名、函数名，名字 要 见名知义 ​ 标示符可以由 字母、下划线 和 数字 组成，不能以数字开头，不能与关键字重名 关键字​ 关键字 就是在 Python 内部已经使用的标识符​ 关键字 具有特殊的功能和含义​ 不允许定义和关键字相同的名字的标示符 变量的命名规则​ 注意 Python 中的 标识符 是 区分大小写的 ​ 在定义变量时，为了保证代码格式，&#x3D; 的左右应该各保留一个空格​ 在 Python 中，如果 变量名 需要由 二个 或 多个单词 组成时，可以按照以下方式命名​ 每个单词都使用小写字母。 小驼峰式命名法第一个单词以小写字母开始，后续单词的首字母大写。 大驼峰式命名法每一个单词的首字母都采用大写字母。 引用的概念在 Python 中 ：变量和 数据 是分开存储的 ​ 数据保存在内存中的一个位置 ​ 变量中保存着数据在内存中的地址 ​ 变量中 记录数据的地址即 引用 使用 id() 函数查看变量中保存数据所在的 内存地址。 在 Python 中，函数的 实参&#x2F;返回值 都是是靠 引用 来传递来的。 局部变量和全局变量 局部变量 是在 函数内部 定义的变量，只能在函数内部使用 全局变量 是在 函数外部定义 的变量（没有定义在某一个函数内），所有函数 内部 都可以使用这个变量 可变和不可变类型 不可变类型，内存中的数据不允许被修改： 数字类型 int, bool, float, complex, long(2.x) 字符串 str 元组 tuple 可变类型，内存中的数据可以被修改： 列表 list 字典 dict 字符串字符串的定义​ 字符串 就是 一串字符，是编程语言中表示文本的数据类型​ 在 Python 中可以使用 一对双引号 “ 或者 一对单引号 ‘ 定义一个字符串，如果字符串内部需要使用 “，可以使用 ‘ 定义字符串，如果字符串内部需要使用 ‘，可以使用 “ 定义字符串，可以使用 索引 获一个字符串中 指定位置的字符，索引计数从 0 开始，也可以使用 for 循环遍历 字符串中每一个字符 字符串的常用操作判断类型 查找和替换 大小写转换 去除空白字符 拆分和连接 运算符算数运算符 先乘除后加减 同级运算符是 从左至右 计算 可以使用 () 调整计算的优先级 算数优先级由高到最低顺序排列 运算符 描述 ** 幂 (最高优先级) * &#x2F; % &#x2F;&#x2F; 乘、除、取余数、取整除 + - 加法、减法 比较（关系）运算符 运算符 描述 &#x3D;&#x3D; 检查两个操作数的值是否 相等，如果是，则条件成立，返回 True !&#x3D; 检查两个操作数的值是否 不相等，如果是，则条件成立，返回 True &gt; 检查左操作数的值是否 大于 右操作数的值，如果是，则条件成立，返回 True &lt; 检查左操作数的值是否 小于 右操作数的值，如果是，则条件成立，返回 True &gt;&#x3D; 检查左操作数的值是否 大于或等于 右操作数的值，如果是，则条件成立，返回 True &lt;&#x3D; 检查左操作数的值是否 小于或等于 右操作数的值，如果是，则条件成立，返回 True 逻辑运算符 运算符 逻辑表达式 描述 and x and y 同True返True，否则返False or x or y 一True返True，同False返False not not x 为True返 False，为 False返 True 赋值运算符 运算符 描述 &#x3D; 简单的赋值运算符 +&#x3D; 加法赋值运算符 -&#x3D; 减法赋值运算符 *&#x3D; 乘法赋值运算符 &#x2F;&#x3D; 除法赋值运算符 &#x2F;&#x2F;&#x3D; 取整除赋值运算符 %&#x3D; 取 模 (余数)赋值运算符 赋值运算符中间不能使用空格 优先级由高到低 ** 幂 (最高优先级) * &#x2F; % &#x2F;&#x2F; 乘、除、取余数、取整除 + - 加法、减法 &lt;&#x3D; &lt; &gt; &gt;&#x3D; 比较运算符 &#x3D;&#x3D; !&#x3D; 等于运算符 &#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D; 赋值运算符 not or and 逻辑运算符","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"http://example.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"网络基础知识学习","slug":"网络基础知识学习","date":"2023-12-05T11:04:08.000Z","updated":"2023-12-10T05:37:38.212Z","comments":true,"path":"2023/12/05/网络基础知识学习/","permalink":"http://example.com/2023/12/05/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"整理一下这两天学的知识。 ivp6和ivp4ivp6​ IPv6的地址长度为128位，是IPv4地址长度的4倍。于是IPv4点分十进制格式不再适用，采用十六进制表示。IPv6有3种表示方法。 0位压缩表示法​ 在某些情况下，一个IPv6地址中间可能包含很长的一段0，可以把连续的一段0压缩为“::”。但为保证地址解析的唯一性，地址中”::”只能出现一次，例如：​ FF01:0:0:0:0:0:0:1101 → FF01::1101​ 0:0:0:0:0:0:0:1 → ::1​ 0:0:0:0:0:0:0:0 → :: 冒分十六进制表示法​ 格式为X:X:X:X:X:X:X:X，其中每个X表示地址中的16b，以十六进制表示，例如：​ ABCD:EF01:2345:6789:ABCD:EF01:2345:6789​ 这种表示法中，每个X的前导0是可以省略的，例如：​ 2001:0DB8:0000:0023:0008:0800:200C:417A→ 2001:DB8:0:23:8:800:200C:417A ivp4​ 网际协议版本4（英语：InternetProtocolversion4，IPv4），又称互联网通信协议第四版，是网际协议开发过程中的第四个修订版本，也是此协议第一个被广泛部署的版本。IPv4是互联网的核心，也是使用最广泛的网际协议版本，其后继版本为IPv6，直到2011年，IANAIPv4位址完全用尽时，IPv6仍处在部署的初期。​ IPv4在IETF于1981年9月发布的RFC 791中被描述，此RFC替换了于1980年1月发布的RFC 760。 ip地址​ ip地址以圆点分隔号的四个十进制数字表示，每个数字从0到255，如某一台主机的ip地址为：128.20.4.1 IP地址 &#x3D; 网络地址 + 主机地址(又称：主机号和网络号组成) 子网掩码​ 长度 为 4 * 8bit（1字节），由 连续的1 以及 连续的0 两部分组成， ​ 例如：11111111.11111111.11111111.00000000，对应十进制：255.255.255.0 ​ 子网掩码计算网络地址：将IP地址和子网掩码都换算成二进制；将两者进行 “与运算”，得到网络地址。 默认网关（地址）网关地址就是网关设备的IP地址。 ​ 假设我们有两个网络： ​ 网络A的IP地址范围为“192.168.1.1~192.168.1.254”，子网掩码为255.255.255.0 ​ 网络B的IP地址范围为“192.168.2.1~192.168.2.254”，子网掩码为255.255.255.0 ​ 要实现这两个网络之间的通信，则必须通过网关。 私网和公网​ 公网地址和私网地址之间的区别主要体现在以下几个方面： ​ 分配方式不同：公网地址由互联网注册机构分配，而私网地址由局域网管理员自行分配。 使用范围不同：公网地址用于Internet上的设备，私网地址用于局域网内部的设备。 ​ 唯一性和可达性不同：公网地址具有全球唯一性和全球可达性，而私网地址只在局域网内部唯一，不具有全球可达性。 私网地址的范围​ A类地址:10.0.0.0~10.255.255.255 ​ B类地址:172.16.0.0~172.31.255.255 ​ C类地址:192.168.0.0~192.168.255.255 ​ IP地址分为5类，其中A、B、C分别保留3个区域作为专用网络地址，私有网络地址不能出现在公共网络上，但只能在内部网络中使用。 私网连接​ 个人电脑连接网络 校园网套娃式降本增效 ​ 校园网连接拓扑图 ​ 路由器与交换 路由器和ip​ OSI（Open Systems Interconnection）七层协议模型 物理层：该层负责传输比特流，涉及到电气、机械和定时接口的规范，如电缆、集线器和中继器等硬件设备。 数据链路层：该层负责将比特流组合成帧，以及帧的发送和接收。它还处理错误检测和流量控制，例如以太网（Ethernet）和点对点协议（PPP）。 网络层：该层负责将数据包从源地址发送到目的地址。它处理路由和转发，主要协议包括IP（Internet Protocol）、ICMP（Internet Control Message Protocol）和IGMP（Internet Group Management Protocol）。 传输层：该层负责在源端和目的端之间建立、管理和终止会话。它提供了可靠的数据传输服务，例如TCP（Transmission Control Protocol）和不可靠的数据传输服务，例如UDP（User Datagram Protocol）。 会话层：该层负责建立、管理和终止网络连接上的会话。它负责同步和对话控制，常见协议包括RPC（Remote Procedure Call）和SQL（Structured Query Language）。 表示层：该层负责将数据转换成能被应用层理解的格式，并进行加密和解密。它处理数据格式转换和数据压缩，常见的数据表示协议包括MIME（Multipurpose Internet Mail Extensions）和TLS（Transport Layer Security）。 应用层：该层是OSI模型的最高层，为用户提供应用程序和服务。它处理用户请求和响应，常见协议包括HTTP（Hypertext Transfer Protocol）、FTP（File Transfer Protocol）、SMTP（Simple Mail Transfer Protocol）和DNS（Domain Name System）。 桥接网络​ 给VM虚拟机桥接网络，VMware提供了三种网络连接方式，VMnet0, VMnet1, Vmnet8，分别代表桥接，Host-only及NAT模式。在VMware的编辑-虚拟网络编辑器可看到对应三种连接方式的设置。每一个VMnet均代表一个虚拟交换机，用于真实主机和虚拟主机构成对应的局域网络。VMware实际可支持更多虚拟交换机，包括VMnet0-9，均可与真实主机相连；此外还可扩展更多虚拟交换机。 proxifier的设置1.下载好proxifier 2.打开自己的clash猫，找到自己的代理IP和端口号 3.打开proxifier点击配置文件-&gt;代理服务器-&gt;编辑 4.将端口号改为clash猫上面的端口号，协议选择SOCKS5，点击确定 5.配置文件-&gt;代理规则，点击添加 6.应用程序输入ssh*; ,动作选择第一个，点击确定，给localhost规则移除 7.default选择direct 8.配置文件-&gt;名称解析 9.将设置改为下图所示，这样proxifier就配置好了 wireshark的使用1.下载wireshark https://www.wireshark.org/ 2.安装时能勾选的东西全部勾选 3.双击WLAN，就可以抓获WLAN的包 4.点击停止 5.可以搜索tcp、udp、http等协议 ip.src &#x3D;&#x3D; 源ip 源IP过滤 ip.dst &#x3D;&#x3D; 目的IP 目的ip过滤 6.抓获ping命令的包 搜索icmp，然后打开cmd输入ping baidu.com 此时打开wireshark就可以看到捕获了ping命令的数据包 桥接网络时最好手动设置，不然容易连不上。 ​ 这两天学习的大致内容就到这了，再见","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"ip和路由","slug":"ip和路由","permalink":"http://example.com/tags/ip%E5%92%8C%E8%B7%AF%E7%94%B1/"},{"name":"抓包","slug":"抓包","permalink":"http://example.com/tags/%E6%8A%93%E5%8C%85/"},{"name":"下载与安装","slug":"下载与安装","permalink":"http://example.com/tags/%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"}]},{"title":"博客搭建","slug":"博客搭建","date":"2023-12-03T05:56:21.000Z","updated":"2023-12-09T13:48:21.741Z","comments":true,"path":"2023/12/03/博客搭建/","permalink":"http://example.com/2023/12/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","excerpt":"","text":"第二天今天的任务是搭建一个自己的博客 环境搭建首先是需要下载软件 提前安装好(node.js)[https://nodejs.org/en] 左边的那个 提前安装好(GIt)[https://git-scm.com/downloads] 提前注册好一个github账号 下载好Typora 上手操作搭建框架​ 在本地找个目录放博客源文件，路径不要有中文在选定的目录中，右键Git Bash Here​ 使用npm命令安装Hexo，输入：​ npm install -g hexo-cli​ hexo init blog​ cd blog​ hexo g 检测​ 检测我们的网站雏形，按顺序输入以下三条命令：​ hexo new test_my_site​ hexo g​ hexo s ​ 然后就可以访问127.0.0.1:4000访问blog了 配置ssh第一次建git账号会显示No such file or directory ssh-keygen -t rsa -C “邮箱号” ​ 然后连续3次回车，最终会生成一个文件在用户目录下，打开用 户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： ​ key填写C:\\Users\\Administrator.ssh\\id_rsa.pub中的内容 连接测试 输入ssh -T git@github.com 后，在后面输入yes，出现：Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access说明成功了。 在选中的位置(blog目录下)打开cmd(以管理员身份) 上传代码 在github上新建一个存储库，命名为github的用户名.github.io 在Git Bash Here还需要继续配置 git config –-global user.name “xxxxx”&#x2F;&#x2F; 你的github用户名，非昵称git config –-global user.email “xxx@qq.com“&#x2F;&#x2F; 填写你的github注册邮箱 编辑_config.yml文件，在最后改成这样(自己的git库名) 1234deploy: type: git repository: git@github.com:xxx/xxx.github.io.git branch: main 最后上传 hexo d -g hexo s 如果出现错误可以试试hexo clean然后再上传 这个博客只是雏形，我们可以找到合适的主题导入，让其更美观。 使用该主题前要安装的东西:可以去hexo找自己喜欢的主题https://hexo.io/themes。例如我找的主题是gal。 将配置文件的主题名字改成下载的主题，不喜欢的话可以重命名主题文件。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849在你的hexo站点目录(非主题目录)下安装 hexo-renderer-sass 和 hexo-renderer-scssnpm install hexo-renderer-sass --save npm install hexo-renderer-scss --saveor cnpm install hexo-renderer-sass --savecnpm install hexo-renderer-scss --saveor yarn add hexo-renderer-sass(推荐)yarn add hexo-renderer-scss(推荐)上面的一步是将.scss样式文件渲染成最后的style.css文件然后, 在你的hexo站点目录下安装 hexo-generator-json-contentnpm install hexo-generator-json-content --saveor cnpm install hexo-generator-json-content --save如果后面你hexo g的时候有问题, 注意看看是不是这个json-content的问题, 如果是的话就是你的node比较老接着在hexo站点目录的_config.yml下进行配置:jsonContent: dateFormat: MM-DD pages: title: true text: true path: true date: true excerpt: true preview: true posts: title: true text: true path: true date: true excerpt: true tags: [&#123; name: tag.name, slug: tag.slug, permalink: tag.permalink &#125;] preview: true接着, 进行下面的步骤:hexo new page &quot;search&quot; // 搜索功能的必须步骤hexo new page &quot;404&quot; // 开启404页面至于tags和categories页面的设置, 百度或google就有对应的方法了, 这里就不多说了对了, hexo站点目录的_config.yml的title, description, author和url要自己正确配置 ​ 你的theme主题文件下会出现下载的主题文件，想更细致的修改可以去找主题文件的配置文件，两个配置文件不要记混了。 ​ 像头像还有背景之类的不敢修改的话可以之接重命名覆盖。 分类和标签hexo主题的文章分类和标签设置，其他主题也应该是类似的。添加成功后会在侧边栏或导航栏生成“分类”和“标签”这两个选项， 创建“分类”选项1.1 生成“分类”页并添加tpye属性 打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page categories 根据路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: 文章分类date: 2023-12-1 13:47:40--- 添加type: &quot;categories&quot;到内容中，添加后是这样的： 12345---title: 文章分类date: 2023-12-1 13:47:40type: &quot;categories&quot;--- 保存并关闭文件。 给文章添加“categories”属性 打开需要添加分类的文章，为其添加categories属性。 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。 创建“标签”选项 生成“标签”页并添加tpye属性 打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page tags 成功后会提示： 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: 标签date: 2023-12-1 14:22:08--- 添加type: &quot;tags&quot;到内容中，添加后是这样的： 12345---title: 文章分类date: 2023-12-1 13:47:40type: &quot;tags&quot;--- 保存并关闭文件。 2.2 给文章添加“tags”属性打开需要添加标签的文章，为其添加tags属性。 ​ 打开scaffolds&#x2F;post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。 ​ scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。","categories":[],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"主题配置","slug":"主题配置","permalink":"http://example.com/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"}]},{"title":"Linux命令","slug":"Linux命令","date":"2023-12-02T13:10:38.000Z","updated":"2023-12-09T13:39:18.235Z","comments":true,"path":"2023/12/02/Linux命令/","permalink":"http://example.com/2023/12/02/Linux%E5%91%BD%E4%BB%A4/","excerpt":"","text":"VM虚拟机搭建 第一天 学习linux命令 目录操作切换目录（cd） cd &#x2F; &#x2F;&#x2F;切换到根目录 cd &#x2F;bin &#x2F;&#x2F;切换到根目录下的bin目录 cd ..&#x2F; &#x2F;&#x2F;切换到上一级目录 或者使用命令：cd .. cd ~ &#x2F;&#x2F;切换到home目录 cd - &#x2F;&#x2F;切换到上次访问的目录 cd xx(文件夹名) &#x2F;&#x2F;切换到本目录下的名为xx的文件目录，如果目录不存在报错 cd &#x2F;xxx&#x2F;xx&#x2F;x &#x2F;&#x2F;可以输入完整的路径， touch 创建文件 查看文件 ls &#x2F;&#x2F;查看当前目录下的所有目录和文件 ls -a &#x2F;&#x2F;查看当前目录下的所有目录和文件（包括隐藏的文件） ls -l &#x2F;&#x2F;列表查看当前目录下的所有目录和文件（列表查看，显示更多信息），与命令”ll”效果一样 ls &#x2F;bin &#x2F;&#x2F;查看指定目录下的所有目录和文件 d 目录 -文件 r读 w写 x执行 三个一组 例如 属性 所有者 所属组 其他人 d r w x r w - r - - 删除目录与文件（rm） rm 文件名 &#x2F;&#x2F;删除当前目录下的文件 rm -f 文件名 &#x2F;&#x2F;删除当前目录的的文件（不询问） rm -r 文件夹名 &#x2F;&#x2F;递归删除当前目录下此名的目录 rm -rf 文件夹名 &#x2F;&#x2F;递归删除当前目录下此名的目录（不询问） rm -rf * &#x2F;&#x2F;将当前目录下的所有目录和文件全部删除 rm -rf &#x2F;* &#x2F;&#x2F;将根目录下的所有文件全部删除【慎用！相当于格式化系统】 搜索目录（find） find &#x2F;bin -name ‘a*’ &#x2F;&#x2F;查找&#x2F;bin目录下的所有以a开头的文件或者目录 编辑文件vi 文件名 &#x2F;&#x2F;打开需要编辑的文件 –进入后，操作界面有三种模式：命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode） 命令模式 -刚进入文件就是命令模式，通过方向键控制光标位置， -使用命令”dd”删除当前整行 -使用命令”&#x2F;字段”进行查找 -按”i”在光标所在字符前开始插入 -按”a”在光标所在字符后开始插入 -按”o”在光标所在行的下面另起一新行插入 -按”：”进入底行模式 插入模式 -此时可以对文件内容进行编辑，左下角会显示 “– 插入 –”” -按”ESC”进入底行模式 底行模式 -退出编辑： :q -强制退出： :q! -保存并退出： :wq","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"基础知识","slug":"基础知识","permalink":"http://example.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]}],"categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"web前端","slug":"web前端","permalink":"http://example.com/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"http://example.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"},{"name":"安装","slug":"安装","permalink":"http://example.com/tags/%E5%AE%89%E8%A3%85/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"HTML","slug":"HTML","permalink":"http://example.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"ip和路由","slug":"ip和路由","permalink":"http://example.com/tags/ip%E5%92%8C%E8%B7%AF%E7%94%B1/"},{"name":"抓包","slug":"抓包","permalink":"http://example.com/tags/%E6%8A%93%E5%8C%85/"},{"name":"下载与安装","slug":"下载与安装","permalink":"http://example.com/tags/%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"},{"name":"博客搭建","slug":"博客搭建","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"主题配置","slug":"主题配置","permalink":"http://example.com/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"}]}